name: Test Ascon
description: Run Ascon tests with security validation and benchmarking
inputs:
  working-directory:
    description: Working directory for ascon crate
    default: lib-q-sponge/ascon
    required: true
  features:
    description: Features to enable for testing
    default: ""
    required: false
  rust-version:
    description: Rust toolchain version to use
    default: "stable"
    required: false
  run-benchmarks:
    description: Whether to run benchmarks (requires nightly)
    default: "false"
    required: false

runs:
  using: composite
  steps:
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@v1.75.0
      with:
        toolchain: ${{ inputs.rust-version }}
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-ascon-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-ascon-
    
    - name: Security audit
      shell: bash
      run: |
        echo "Running security audit for Ascon..."
        cd ${{ inputs.working-directory }}
        cargo audit --deny warnings
        echo "Security audit completed successfully"
    
    - name: Check formatting
      shell: bash
      run: |
        echo "Checking code formatting..."
        cd ${{ inputs.working-directory }}
        cargo fmt --all -- --check
        echo "Formatting check completed"
    
    - name: Clippy linting
      shell: bash
      run: |
        echo "Running Clippy linting..."
        cd ${{ inputs.working-directory }}
        if [ -n "${{ inputs.features }}" ]; then
          cargo clippy --all-targets --features "${{ inputs.features }}" -- -D warnings
        else
          cargo clippy --all-targets -- -D warnings
        fi
        echo "Clippy linting completed"
    
    - name: Build with no default features
      shell: bash
      run: |
        echo "Building with no default features..."
        cd ${{ inputs.working-directory }}
        cargo build --no-default-features
        echo "Build completed"
    
    - name: Build with all features
      shell: bash
      run: |
        echo "Building with features: ${{ inputs.features }}"
        cd ${{ inputs.working-directory }}
        if [ -n "${{ inputs.features }}" ]; then
          cargo build --features "${{ inputs.features }}"
        else
          cargo build
        fi
        echo "Build with features completed"
    
    - name: Run tests with no default features
      shell: bash
      run: |
        echo "Running tests with no default features..."
        cd ${{ inputs.working-directory }}
        cargo test --no-default-features
        echo "Tests completed"
    
    - name: Run tests with all features
      shell: bash
      run: |
        echo "Running tests with features: ${{ inputs.features }}"
        cd ${{ inputs.working-directory }}
        if [ -n "${{ inputs.features }}" ]; then
          cargo test --features "${{ inputs.features }}"
        else
          cargo test
        fi
        echo "Tests with features completed"
    
    - name: Run benchmarks (nightly only)
      if: inputs.run-benchmarks == 'true' && inputs.rust-version == 'nightly'
      shell: bash
      run: |
        echo "Running benchmarks..."
        cd ${{ inputs.working-directory }}
        cargo bench
        echo "Benchmarks completed"
    
    - name: Cross-compilation test (ARM64)
      shell: bash
      run: |
        echo "Testing ARM64 cross-compilation..."
        cd ${{ inputs.working-directory }}
        rustup target add aarch64-unknown-linux-gnu
        if [ -n "${{ inputs.features }}" ]; then
          cargo check --target aarch64-unknown-linux-gnu --features "${{ inputs.features }}"
        else
          cargo check --target aarch64-unknown-linux-gnu
        fi
        echo "Cross-compilation test completed"
    
    - name: WASM compilation test
      shell: bash
      run: |
        echo "Testing WASM compilation..."
        cd ${{ inputs.working-directory }}
        rustup target add wasm32-unknown-unknown
        if [ -n "${{ inputs.features }}" ]; then
          cargo check --target wasm32-unknown-unknown --features "${{ inputs.features }}"
        else
          cargo check --target wasm32-unknown-unknown
        fi
        echo "WASM compilation test completed"
    
    - name: Constant-time operation verification
      shell: bash
      run: |
        echo "Verifying constant-time operations..."
        cd ${{ inputs.working-directory }}
        # Run specific tests that verify constant-time behavior
        cargo test --test constant_time
        echo "Constant-time verification completed"
