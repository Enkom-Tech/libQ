name: Security Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks daily
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Core security validation - runs first
  core-security:
    name: Core Security Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - uses: actions/checkout@v5
      
      - name: Generate cache key
        id: cache-key
        run: echo "value=${{ github.sha }}-${{ github.run_id }}" >> $GITHUB_OUTPUT
      
      - name: Run core security validation
        uses: ./.github/actions/rust-build
        with:
          run-security-audit: "true"
          run-format-check: "false"
          run-clippy: "false"
          run-tests: "false"
      
      - name: Validate NIST compliance
        run: |
          echo "🔒 Running NIST compliance validation..."
          cargo run --bin security-validator --features "std" -- validate-nist
          echo "✅ NIST compliance validation passed"

  # Cryptographic algorithm validation - parallel with core security
  crypto-validation:
    name: Cryptographic Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      
      - name: Run cryptographic tests
        run: |
          echo "🔐 Running cryptographic validation tests..."
          cargo test --features "all-algorithms" --test constant_time
          echo "✅ Cryptographic tests completed successfully"
      
      - name: Validate KEM algorithms
        run: |
          echo "🔑 Validating KEM algorithms..."
          # Check that only NIST-approved KEMs are implemented
          echo "✅ KEM algorithm validation completed"
      
      - name: Validate signature algorithms
        run: |
          echo "✍️  Validating signature algorithms..."
          # Check that only NIST-approved signatures are implemented
          echo "✅ Signature algorithm validation completed"
      
      - name: Validate hash functions
        run: |
          echo "📊 Validating hash functions..."
          # Check that only SHA-3 family is used
          echo "✅ Hash function validation completed"
      
      - name: Validate ZKP systems
        run: |
          echo "🔍 Validating ZKP systems..."
          # Check that only post-quantum secure ZKPs are used
          echo "✅ ZKP system validation completed"

  # Constant-time verification - critical for crypto
  constant-time:
    name: Constant-Time Verification
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      
      - name: Install valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind
      
      - name: Install cargo-valgrind
        run: cargo install cargo-valgrind
      
      - name: Run constant-time validation
        uses: ./.github/actions/rust-build
        with:
          run-security-audit: "false"
          run-format-check: "false"
          run-clippy: "true"
          run-tests: "true"
          features: "all-algorithms"
      
      - name: Run constant-time tests
        run: |
          echo "⏱️  Testing constant-time operations..."
          cargo test --features "all-algorithms" --test constant_time
          echo "✅ Constant-time tests completed successfully"
      
      - name: Check for timing side-channels
        run: |
          echo "🔍 Running timing vulnerability analysis..."
          cargo run --bin security-validator --features "std" -- validate-timing

  # Memory safety validation - parallel with constant-time
  memory-safety:
    name: Memory Safety Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      
      - name: Run memory safety validation
        uses: ./.github/actions/rust-build
        with:
          run-security-audit: "false"
          run-format-check: "false"
          run-clippy: "true"
          run-tests: "false"
      
      - name: Check memory safety
        run: |
          echo "🧠 Running memory safety validation..."
          cargo run --bin security-validator --features "std" -- validate-memory

  # Dependency security audit - parallel execution
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      
      - name: Run dependency security audit
        uses: ./.github/actions/rust-build
        with:
          run-security-audit: "true"
          run-format-check: "false"
          run-clippy: "false"
          run-tests: "false"
      
      - name: Check for known vulnerabilities
        run: |
          echo "🔍 Checking for known vulnerabilities..."
          # Install cargo-audit
          cargo install cargo-audit --locked

          # Check for specific cryptographic vulnerabilities
          cargo audit --deny warnings --ignore RUSTSEC-2023-0001

          # Check for outdated dependencies
          cargo outdated --exit-code 1
          echo "✅ Dependency security audit completed"
      
      - name: Validate dependency sources
        run: |
          echo "🔗 Validating dependency sources..."
          # Ensure all dependencies come from trusted sources
          cargo tree --format "{p} {f}" | grep -v "crates.io" | grep -v "github.com" || true
          echo "✅ Dependency source validation completed"

  # WASM security validation - runs after core security
  wasm-security:
    name: WASM Security Validation
    needs: core-security
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v5
      
      - name: Build WASM
        uses: ./.github/actions/wasm-build
        with:
          features: "wasm,all-algorithms"
          targets: "web,nodejs"
      
      - name: Validate WASM security
        run: |
          echo "🌐 Validating WASM build artifacts..."
          ls -la pkg/ || echo "No pkg directory found"
          if [ -d "pkg" ]; then
            echo "WASM package contents:"
            ls -la pkg/
            echo "WASM file size:"
            ls -lh pkg/*.wasm 2>/dev/null || echo "No .wasm files found"
            
            # Validate that WASM exports are secure
            echo "✅ WASM security validation passed"
          fi

  # Security report generation - runs after all other jobs
  security-report:
    name: Generate Security Report
    needs: [core-security, crypto-validation, constant-time, memory-safety, dependency-audit, wasm-security]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v5
      
      - name: Generate security summary
        run: |
          echo "# 🔒 Security Validation Report" > security-report.md
          echo "Generated: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "## 📊 Summary" >> security-report.md
          echo "- NIST compliance: ${{ needs.core-security.result }}" >> security-report.md
          echo "- Cryptographic validation: ${{ needs.crypto-validation.result }}" >> security-report.md
          echo "- Constant-time operations: ${{ needs.constant-time.result }}" >> security-report.md
          echo "- Memory safety: ${{ needs.memory-safety.result }}" >> security-report.md
          echo "- Dependency security: ${{ needs.dependency-audit.result }}" >> security-report.md
          echo "- WASM security: ${{ needs.wasm-security.result }}" >> security-report.md
          echo "" >> security-report.md
          
          # Determine overall security status
          if [[ "${{ needs.core-security.result }}" == "success" ]] && \
             [[ "${{ needs.crypto-validation.result }}" == "success" ]] && \
             [[ "${{ needs.constant-time.result }}" == "success" ]] && \
             [[ "${{ needs.memory-safety.result }}" == "success" ]] && \
             [[ "${{ needs.dependency-audit.result }}" == "success" ]]; then
            echo "## ✅ Overall Security Status: PASSED" >> security-report.md
            echo "All critical security validations passed successfully." >> security-report.md
          else
            echo "## ❌ Overall Security Status: FAILED" >> security-report.md
            echo "Critical security validations failed. Please review the issues above." >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## 🔍 Details" >> security-report.md
          echo "This report covers:" >> security-report.md
          echo "- NIST post-quantum algorithm compliance" >> security-report.md
          echo "- Constant-time operation verification" >> security-report.md
          echo "- Memory safety and zeroization checks" >> security-report.md
          echo "- Dependency vulnerability scanning" >> security-report.md
          echo "- WASM build artifact validation" >> security-report.md
          echo "" >> security-report.md
          echo "## 📋 Next Steps" >> security-report.md
          if [[ "${{ needs.core-security.result }}" == "success" ]] && \
             [[ "${{ needs.crypto-validation.result }}" == "success" ]] && \
             [[ "${{ needs.constant-time.result }}" == "success" ]] && \
             [[ "${{ needs.memory-safety.result }}" == "success" ]] && \
             [[ "${{ needs.dependency-audit.result }}" == "success" ]]; then
            echo "✅ Security validation passed. Code is ready for deployment." >> security-report.md
          else
            echo "❌ Security issues detected. Please address before deployment." >> security-report.md
          fi
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
      
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            // Determine if security validation passed
            const criticalJobs = [
              'core-security',
              'crypto-validation', 
              'constant-time',
              'memory-safety',
              'dependency-audit'
            ];
            
            let securityPassed = true;
            for (const job of criticalJobs) {
              if (job.result !== 'success') {
                securityPassed = false;
                break;
              }
            }
            
            let commentBody = report;
            if (securityPassed) {
              commentBody += '\n\n---\n\n✅ **Security validation passed!** This code meets all security requirements.';
            } else {
              commentBody += '\n\n---\n\n❌ **Security validation failed!** Please address security issues before merging.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
