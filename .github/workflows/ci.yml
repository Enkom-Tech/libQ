name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Security and dependency scanning
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust (with retry)
        run: |
          echo "Installing Rust toolchain with retry logic..."
          for i in {1..3}; do
            echo "Attempt $i of 3"
            if curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal --component rustfmt --component clippy; then
              echo "Rust installation successful"
              break
            else
              echo "Rust installation failed, attempt $i"
              if [ $i -eq 3 ]; then
                echo "All attempts failed"
                exit 1
              fi
              sleep 30
            fi
          done
          source ~/.cargo/env
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Install cargo-outdated
        run: cargo install cargo-outdated
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Security audit
        run: cargo audit --deny warnings
      
      - name: Check for known vulnerabilities
        run: cargo audit --deny warnings --ignore RUSTSEC-2023-0001
      
      - name: Check for outdated dependencies
        run: cargo outdated --exit-code 1

  # Code quality and formatting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust (with retry)
        run: |
          echo "Installing Rust toolchain with retry logic..."
          for i in {1..3}; do
            echo "Attempt $i of 3"
            if curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal --component rustfmt --component clippy; then
              echo "Rust installation successful"
              break
            else
              echo "Rust installation failed, attempt $i"
              if [ $i -eq 3 ]; then
                echo "All attempts failed"
                exit 1
              fi
              sleep 30
            fi
          done
          source ~/.cargo/env
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Clippy linting
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Check for unused dependencies
        run: cargo check --all-targets --all-features

  # Unit and integration tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            features: "std"
          - target: x86_64-unknown-linux-gnu
            features: "std,all-algorithms"
          - target: x86_64-unknown-linux-gnu
            features: "std,ml-kem,rand"
          - target: x86_64-unknown-linux-gnu
            features: "no_std,getrandom"
          - target: x86_64-unknown-linux-gnu
            features: "std,wasm"
          - target: x86_64-unknown-linux-gnu
            features: "std,zkp"
          - target: x86_64-unknown-linux-gnu
            package: "lib-q-kem"
            features: "ml-kem"
          - target: x86_64-unknown-linux-gnu
            package: "lib-q-ml-kem"
            features: "std"
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust (with retry)
        run: |
          echo "Installing Rust toolchain with retry logic..."
          for i in {1..3}; do
            echo "Attempt $i of 3"
            if curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal --component rustfmt --component clippy; then
              echo "Rust installation successful"
              break
            else
              echo "Rust installation failed, attempt $i"
              if [ $i -eq 3 ]; then
                echo "All attempts failed"
                exit 1
              fi
              sleep 30
            fi
          done
          source ~/.cargo/env
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run tests
        run: |
          if [ -n "${{ matrix.package }}" ]; then
            cargo test -p ${{ matrix.package }} --features "${{ matrix.features }}" --verbose
          else
            cargo test --features "${{ matrix.features }}" --verbose
          fi
      
      - name: Run tests with release optimizations
        run: |
          if [ -n "${{ matrix.package }}" ]; then
            cargo test -p ${{ matrix.package }} --features "${{ matrix.features }}" --release --verbose
          else
            cargo test --features "${{ matrix.features }}" --release --verbose
          fi

  # WASM compilation and testing
  wasm:
    name: WASM Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust (with retry)
        run: |
          echo "Installing Rust toolchain with retry logic..."
          for i in {1..3}; do
            echo "Attempt $i of 3"
            if curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal --component rustfmt --component clippy; then
              echo "Rust installation successful"
              break
            else
              echo "Rust installation failed, attempt $i"
              if [ $i -eq 3 ]; then
                echo "All attempts failed"
                exit 1
              fi
              sleep 30
            fi
          done
          source ~/.cargo/env
      
      - name: Install wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: latest
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            pkg
          key: ${{ runner.os }}-wasm-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-wasm-
      
      # Build main lib-q workspace WASM (web target)
      - name: Build main lib-q WASM (web target)
        run: |
          echo "Building main lib-q WASM for web target..."
          wasm-pack build --target web --features "wasm,all-algorithms,ml-kem" --verbose
          echo "Main lib-q WASM web build completed successfully"
      
      # Build main lib-q workspace WASM (nodejs target)
      - name: Build main lib-q WASM (nodejs target)
        run: |
          echo "Building main lib-q WASM for nodejs target..."
          wasm-pack build --target nodejs --features "wasm,all-algorithms,ml-kem" --verbose
          echo "Main lib-q WASM nodejs build completed successfully"
      
      # Build lib-q-kem WASM (web target)
      - name: Build lib-q-kem WASM (web target)
        run: |
          echo "Building lib-q-kem WASM for web target..."
          cd lib-q-kem
          wasm-pack build --target web --features "wasm,ml-kem" --verbose
          echo "lib-q-kem WASM web build completed successfully"
      
      # Build lib-q-kem WASM (nodejs target)
      - name: Build lib-q-kem WASM (nodejs target)
        run: |
          echo "Building lib-q-kem WASM for nodejs target..."
          cd lib-q-kem
          wasm-pack build --target nodejs --features "wasm,ml-kem" --verbose
          echo "lib-q-kem WASM nodejs build completed successfully"
      
      # Build lib-q-core WASM (web target)
      - name: Build lib-q-core WASM (web target)
        run: |
          echo "Building lib-q-core WASM for web target..."
          cd lib-q-core
          wasm-pack build --target web --features "wasm,ml-kem,rand" --verbose
          echo "lib-q-core WASM web build completed successfully"
      
      # Build lib-q-core WASM (nodejs target)
      - name: Build lib-q-core WASM (nodejs target)
        run: |
          echo "Building lib-q-core WASM for nodejs target..."
          cd lib-q-core
          wasm-pack build --target nodejs --features "wasm,ml-kem,rand" --verbose
          echo "lib-q-core WASM nodejs build completed successfully"
      
      - name: Verify WASM artifacts
        run: |
          echo "Verifying WASM build artifacts..."
          ls -la pkg/ || echo "No pkg directory found"
          if [ -d "pkg" ]; then
            echo "WASM package contents:"
            ls -la pkg/
            echo "WASM file size:"
            ls -lh pkg/*.wasm 2>/dev/null || echo "No .wasm files found"
          fi

  # Performance benchmarks
  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust (with retry)
        run: |
          echo "Installing Rust toolchain with retry logic..."
          for i in {1..3}; do
            echo "Attempt $i of 3"
            if curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal --component rustfmt --component clippy; then
              echo "Rust installation successful"
              break
            else
              echo "Rust installation failed, attempt $i"
              if [ $i -eq 3 ]; then
                echo "All attempts failed"
                exit 1
              fi
              sleep 30
            fi
          done
          source ~/.cargo/env
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run benchmarks
        run: cargo bench --features "all-algorithms" --verbose

  # Documentation generation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust (with retry)
        run: |
          echo "Installing Rust toolchain with retry logic..."
          for i in {1..3}; do
            echo "Attempt $i of 3"
            if curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal --component rustfmt --component clippy; then
              echo "Rust installation successful"
              break
            else
              echo "Rust installation failed, attempt $i"
              if [ $i -eq 3 ]; then
                echo "All attempts failed"
                exit 1
              fi
              sleep 30
            fi
          done
          source ~/.cargo/env
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Generate documentation
        run: cargo doc --all-features --no-deps
      
      - name: Check documentation
        run: cargo doc --all-features --no-deps --document-private-items

  # Cross-platform compilation (Linux only)
  cross-compile-linux:
    name: Cross-Platform Build (Linux)
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Build for target
        run: |
          echo "Building for target: ${{ matrix.target }}"
          cargo build --target ${{ matrix.target }} --features "all-algorithms" --release
          echo "Build completed successfully"
      
      - name: Check for target
        run: |
          echo "Checking for target: ${{ matrix.target }}"
          cargo check --target ${{ matrix.target }} --features "all-algorithms"
          echo "Check completed successfully"
      
      - name: Show build artifacts
        run: |
          echo "Build artifacts for target: ${{ matrix.target }}"
          ls -la target/${{ matrix.target }}/release/ || echo "No build artifacts found"

  # Windows compilation (separate job for proper toolchain)
  cross-compile-windows:
    name: Cross-Platform Build (Windows)
    runs-on: windows-latest
    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Build for target
        run: |
          echo "Building for target: ${{ matrix.target }}"
          cargo build --target ${{ matrix.target }} --features "all-algorithms" --release
          echo "Build completed successfully"
      
      - name: Check for target
        run: |
          echo "Checking for target: ${{ matrix.target }}"
          cargo check --target ${{ matrix.target }} --features "all-algorithms"
          echo "Check completed successfully"
      
      - name: Show build artifacts
        run: |
          echo "Build artifacts for target: ${{ matrix.target }}"
          dir target\${{ matrix.target }}\release\ || echo "No build artifacts found"

  # ARM64 compilation (separate job for proper toolchain)
  cross-compile-arm64:
    name: Cross-Platform Build (ARM64)
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Verify Rust installation
        run: |
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"
          echo "Available targets:"
          rustup target list --installed
      
      - name: Add ARM64 target
        run: |
          echo "Installing ARM64 target..."
          
          # Install target with error handling
          if ! rustup target add aarch64-unknown-linux-gnu; then
            echo "Failed to install aarch64-unknown-linux-gnu target"
            exit 1
          fi
          
          echo "Verifying target installation..."
          rustup target list --installed | grep aarch64-unknown-linux-gnu
          echo "Target installation completed"
      
      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      
      - name: Configure cross-compilation
        run: |
          mkdir -p ~/.cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
          echo 'ar = "aarch64-linux-gnu-ar"' >> ~/.cargo/config.toml
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Build for ARM64
        run: |
          echo "Building for target: aarch64-unknown-linux-gnu"
          cargo build --target aarch64-unknown-linux-gnu --features "all-algorithms" --release
          echo "Build completed successfully"
      
      - name: Check for ARM64
        run: |
          echo "Checking for target: aarch64-unknown-linux-gnu"
          cargo check --target aarch64-unknown-linux-gnu --features "all-algorithms"
          echo "Check completed successfully"
      
      - name: Show build artifacts
        run: |
          echo "Build artifacts for target: aarch64-unknown-linux-gnu"
          ls -la target/aarch64-unknown-linux-gnu/release/ || echo "No build artifacts found"

  # macOS compilation (separate job for proper toolchain)
  cross-compile-macos:
    name: Cross-Platform Build (macOS)
    runs-on: macos-latest
    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust (with retry)
        run: |
          echo "Installing Rust toolchain with retry logic..."
          for i in {1..3}; do
            echo "Attempt $i of 3"
            if curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal --component rustfmt --component clippy; then
              echo "Rust installation successful"
              break
            else
              echo "Rust installation failed, attempt $i"
              if [ $i -eq 3 ]; then
                echo "All attempts failed"
                exit 1
              fi
              sleep 30
            fi
          done
          source ~/.cargo/env
      
      - name: Verify Rust installation
        run: |
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"
          echo "Available targets:"
          rustup target list --installed
      
      - name: Add macOS targets
        run: |
          echo "Installing macOS targets..."
          
          # Install targets with error handling
          if ! rustup target add x86_64-apple-darwin; then
            echo "Failed to install x86_64-apple-darwin target"
            exit 1
          fi
          
          if ! rustup target add aarch64-apple-darwin; then
            echo "Failed to install aarch64-apple-darwin target"
            exit 1
          fi
          
          echo "Verifying target installation..."
          rustup target list --installed | grep apple-darwin
          echo "Target installation completed"
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Build for target
        run: |
          echo "Building for target: ${{ matrix.target }}"
          cargo build --target ${{ matrix.target }} --features "all-algorithms" --release
          echo "Build completed successfully"
      
      - name: Check for target
        run: |
          echo "Checking for target: ${{ matrix.target }}"
          cargo check --target ${{ matrix.target }} --features "all-algorithms"
          echo "Check completed successfully"
      
      - name: Show build artifacts
        run: |
          echo "Build artifacts for target: ${{ matrix.target }}"
          ls -la target/${{ matrix.target }}/release/ || echo "No build artifacts found"

  # Constant-time verification (critical for crypto)
  constant-time:
    name: Constant-Time Verification
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust (with retry)
        run: |
          echo "Installing Rust toolchain with retry logic..."
          for i in {1..3}; do
            echo "Attempt $i of 3"
            if curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal --component rustfmt --component clippy; then
              echo "Rust installation successful"
              break
            else
              echo "Rust installation failed, attempt $i"
              if [ $i -eq 3 ]; then
                echo "All attempts failed"
                exit 1
              fi
              sleep 30
            fi
          done
          source ~/.cargo/env
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Install cargo-valgrind
        run: cargo install cargo-valgrind
      
      - name: Run constant-time tests
        run: cargo test --features "all-algorithms" --test constant_time

  # Composite Action Jobs for Individual Crate Testing
  
  # Test Keccak with composite action
  test-keccak:
    name: Test Keccak (Composite)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/test-keccak
        with:
          working-directory: lib-q-keccak
          features: "asm,simd"
          rust-version: "nightly"
          run-benchmarks: "true"
          run-simd: "true"

  # Test SHA3 with composite action
  test-sha3:
    name: Test SHA3 (Composite)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/test-sha3
        with:
          working-directory: lib-q-sha3
          features: "alloc,oid"
          rust-version: "stable"
          test-algorithms: "sha3-224,sha3-256,sha3-384,sha3-512,keccak224,keccak256,keccak384,keccak512"

  # Test K12 with composite action
  test-k12:
    name: Test K12 (Composite)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/test-k12
        with:
          working-directory: lib-q-k12
          features: "alloc,oid"
          rust-version: "stable"
          run-benchmarks: "false"

  # Test K12 with nightly features
  test-k12-nightly:
    name: Test K12 (Nightly)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/test-k12
        with:
          working-directory: lib-q-k12
          features: "alloc,oid"
          rust-version: "nightly"
          run-benchmarks: "true"

  # Test Ascon with composite action
  test-ascon:
    name: Test Ascon (Composite)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/test-ascon
        with:
          working-directory: lib-q-ascon
          features: ""
          rust-version: "stable"
          run-benchmarks: "false"

  # Test Ascon with nightly features
  test-ascon-nightly:
    name: Test Ascon (Nightly)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/test-ascon
        with:
          working-directory: lib-q-ascon
          features: ""
          rust-version: "nightly"
          run-benchmarks: "true"

  # Test lib-q-sponge integration with composite action
  test-lib-q-sponge:
    name: Test lib-q-sponge (Composite)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/test-lib-q-sponge
        with:
          working-directory: lib-q-sponge
          features: "asm"
          rust-version: "stable"
          run-benchmarks: "false"

  # Test lib-q-sponge integration with nightly features
  test-lib-q-sponge-nightly:
    name: Test lib-q-sponge (Nightly)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/test-lib-q-sponge
        with:
          working-directory: lib-q-sponge
          features: "asm"
          rust-version: "nightly"
          run-benchmarks: "true"

  # Test ML-KEM implementation
  test-ml-kem:
    name: Test ML-KEM Implementation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Test ML-KEM crate standalone
        run: |
          cd lib-q-ml-kem
          cargo test --verbose
      
      - name: Test ML-KEM integration with lib-q-core
        run: |
          cd lib-q-core
          cargo test --features "ml-kem,rand" --verbose
      
      - name: Test no_std compatibility
        run: |
          cd lib-q-core
          cargo build --no-default-features --features "getrandom"
      
      - name: Test ML-KEM with lib-q-kem
        run: |
          cd lib-q-kem
          cargo test --features "ml-kem" --verbose


