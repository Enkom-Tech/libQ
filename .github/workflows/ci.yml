name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Core validation pipeline - runs first and fastest
  core-validation:
    name: Core Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - uses: actions/checkout@v5
      
      - name: Generate cache key
        id: cache-key
        run: echo "value=${{ github.sha }}-${{ github.run_id }}" >> $GITHUB_OUTPUT
      
      - name: Core validation
        uses: ./.github/actions/rust-build
        with:
          run-security-audit: "true"
          run-format-check: "true"
          run-clippy: "true"
          run-tests: "false"
          features: "all-algorithms"

  # Parallel test matrix - runs after core validation
  test-matrix:
    name: Test Matrix
    needs: core-validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        include:
          - name: "std"
            features: "std"
            package: ""
          - name: "all-algorithms"
            features: "std,all-algorithms"
            package: ""
          - name: "ml-kem"
            features: "std,ml-kem,rand"
            package: ""
          - name: "no_std"
            features: "no_std,getrandom"
            package: ""
          - name: "wasm"
            features: "std,wasm"
            package: ""
          - name: "zkp"
            features: "std,zkp"
            package: ""
          - name: "lib-q-kem"
            features: "ml-kem"
            package: "lib-q-kem"
          - name: "lib-q-ml-kem"
            features: "std"
            package: "lib-q-ml-kem"
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Run tests
        uses: ./.github/actions/rust-test
        with:
          features: ${{ matrix.features }}
          package: ${{ matrix.package }}
          run-release-tests: "true"

  # WASM validation - parallel with test matrix
  wasm-validation:
    name: WASM Validation
    needs: core-validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        include:
          - working-directory: "."
            features: "wasm,all-algorithms,ml-kem"
          - working-directory: "lib-q-kem"
            features: "wasm,ml-kem"
          - working-directory: "lib-q-core"
            features: "wasm,ml-kem,rand"
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Build WASM
        uses: ./.github/actions/wasm-build
        with:
          working-directory: ${{ matrix.working-directory }}
          features: ${{ matrix.features }}
          targets: "web,nodejs"

  # Cross-platform builds - parallel execution
  cross-platform:
    name: Cross-Platform Builds
    needs: core-validation
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: "Linux x86_64"
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: "Linux ARM64"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: "Windows x86_64"
          - os: macos-latest
            target: x86_64-apple-darwin
            name: "macOS x86_64"
          - os: macos-latest
            target: aarch64-apple-darwin
            name: "macOS ARM64"
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Add target
        run: rustup target add ${{ matrix.target }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      
      - name: Build for target
        run: |
          echo "Building for ${{ matrix.name }} (${{ matrix.target }})"
          cargo build --target ${{ matrix.target }} --features "all-algorithms" --release
          cargo check --target ${{ matrix.target }} --features "all-algorithms"

  # Performance and benchmarks - runs after core validation
  performance:
    name: Performance & Benchmarks
    needs: core-validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-bench-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-bench-
      
      - name: Run benchmarks
        run: cargo bench --features "all-algorithms" --verbose

  # Documentation generation - lightweight job
  documentation:
    name: Documentation
    needs: core-validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-docs-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-docs-
      
      - name: Generate documentation
        run: |
          cargo doc --all-features --no-deps
          cargo doc --all-features --no-deps --document-private-items

  # Specialized algorithm testing - parallel execution
  algorithm-tests:
    name: Algorithm Tests
    needs: core-validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        include:
          - name: "Keccak"
            action: test-keccak
            working-directory: lib-q-keccak
            features: "asm,simd"
            rust-version: "nightly"
            run-benchmarks: "true"
          - name: "SHA3"
            action: test-sha3
            working-directory: lib-q-sha3
            features: "alloc,oid"
            rust-version: "stable"
            test-algorithms: "sha3-224,sha3-256,sha3-384,sha3-512,keccak224,keccak256,keccak384,keccak512"
            run-benchmarks: "false"
          - name: "K12"
            action: test-k12
            working-directory: lib-q-k12
            features: "alloc,oid"
            rust-version: "stable"
            run-benchmarks: "false"
          - name: "Ascon"
            action: test-ascon
            working-directory: lib-q-ascon
            features: ""
            rust-version: "stable"
            run-benchmarks: "false"
          - name: "Sponge"
            action: test-lib-q-sponge
            working-directory: lib-q-sponge
            features: "asm"
            rust-version: "stable"
            run-benchmarks: "false"
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Run algorithm tests
        uses: ./.github/actions/test-keccak
        if: matrix.action == 'test-keccak'
        with:
          working-directory: ${{ matrix.working-directory }}
          features: ${{ matrix.features }}
          rust-version: ${{ matrix.rust-version }}
          run-benchmarks: ${{ matrix.run-benchmarks }}
          test-algorithms: ${{ matrix.test-algorithms }}
      
      - name: Run SHA3 tests
        uses: ./.github/actions/test-sha3
        if: matrix.action == 'test-sha3'
        with:
          working-directory: ${{ matrix.working-directory }}
          features: ${{ matrix.features }}
          rust-version: ${{ matrix.rust-version }}
          run-benchmarks: ${{ matrix.run-benchmarks }}
          test-algorithms: ${{ matrix.test-algorithms }}
      
      - name: Run K12 tests
        uses: ./.github/actions/test-k12
        if: matrix.action == 'test-k12'
        with:
          working-directory: ${{ matrix.working-directory }}
          features: ${{ matrix.features }}
          rust-version: ${{ matrix.rust-version }}
          run-benchmarks: ${{ matrix.run-benchmarks }}
          test-algorithms: ${{ matrix.test-algorithms }}
      
      - name: Run Ascon tests
        uses: ./.github/actions/test-ascon
        if: matrix.action == 'test-ascon'
        with:
          working-directory: ${{ matrix.working-directory }}
          features: ${{ matrix.features }}
          rust-version: ${{ matrix.rust-version }}
          run-benchmarks: ${{ matrix.run-benchmarks }}
          test-algorithms: ${{ matrix.test-algorithms }}
      
      - name: Run Sponge tests
        uses: ./.github/actions/test-lib-q-sponge
        if: matrix.action == 'test-lib-q-sponge'
        with:
          working-directory: ${{ matrix.working-directory }}
          features: ${{ matrix.features }}
          rust-version: ${{ matrix.rust-version }}
          run-benchmarks: ${{ matrix.run-benchmarks }}
          test-algorithms: ${{ matrix.test-algorithms }}

  # ML-KEM specific testing
  ml-kem-tests:
    name: ML-KEM Tests
    needs: core-validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-mlkem-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-mlkem-
      
      - name: Test ML-KEM standalone
        run: |
          cd lib-q-ml-kem
          cargo test --verbose
      
      - name: Test ML-KEM integration
        run: |
          cd lib-q-core
          cargo test --features "ml-kem,rand" --verbose
          cargo build --no-default-features --features "getrandom"
      
      - name: Test ML-KEM with lib-q-kem
        run: |
          cd lib-q-kem
          cargo test --features "ml-kem" --verbose

  # Constant-time verification - critical for crypto
  constant-time:
    name: Constant-Time Verification
    needs: core-validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind
      
      - name: Install cargo-valgrind
        run: cargo install cargo-valgrind
      
      - name: Run constant-time tests
        run: cargo test --features "all-algorithms" --test constant_time

  # Final validation - runs after all other jobs
  final-validation:
    name: Final Validation
    needs: [test-matrix, wasm-validation, cross-platform, performance, documentation, algorithm-tests, ml-kem-tests, constant-time]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check job status
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "All jobs completed. Check individual job results above." >> $GITHUB_STEP_SUMMARY
          
          # Check if any required jobs failed
          if [[ "${{ needs.test-matrix.result }}" == "failure" ]] || \
             [[ "${{ needs.wasm-validation.result }}" == "failure" ]] || \
             [[ "${{ needs.constant-time.result }}" == "failure" ]]; then
            echo "❌ Critical jobs failed. Please review the failures above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ All critical jobs passed successfully!" >> $GITHUB_STEP_SUMMARY


