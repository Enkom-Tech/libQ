name: CD

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Pre-release validation
  validate:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Security audit
        run: cargo audit --deny warnings
      
      - name: Run all tests
        run: cargo test --all-features --release
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Clippy linting
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Validate version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
          if [ "$VERSION" != "$CARGO_VERSION" ]; then
            echo "Version mismatch: tag $VERSION != Cargo.toml $CARGO_VERSION"
            exit 1
          fi

  # Publish Rust crates
  publish-crates:
    name: Publish Rust Crates
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Publish lib-q-core to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish -p lib-q-core --token $CARGO_REGISTRY_TOKEN
      
      - name: Publish lib-q-keccak to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish -p lib-q-keccak --token $CARGO_REGISTRY_TOKEN
      
      - name: Publish lib-q-ascon to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish -p lib-q-ascon --token $CARGO_REGISTRY_TOKEN
      
      - name: Publish lib-q-sha3 to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish -p lib-q-sha3 --token $CARGO_REGISTRY_TOKEN
      
      - name: Publish lib-q-k12 to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish -p lib-q-k12 --token $CARGO_REGISTRY_TOKEN
      
      - name: Publish lib-q-kem to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish -p lib-q-kem --token $CARGO_REGISTRY_TOKEN
      
      - name: Publish lib-q-sig to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish -p lib-q-sig --token $CARGO_REGISTRY_TOKEN
      
      - name: Publish lib-q-hash to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish -p lib-q-hash --token $CARGO_REGISTRY_TOKEN
      
      - name: Publish lib-q-aead to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish -p lib-q-aead --token $CARGO_REGISTRY_TOKEN
      
      - name: Publish lib-q-utils to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish -p lib-q-utils --token $CARGO_REGISTRY_TOKEN
      
      - name: Publish lib-q-zkp to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish -p lib-q-zkp --token $CARGO_REGISTRY_TOKEN
      
      - name: Publish lib-q-sponge to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish -p lib-q-sponge --token $CARGO_REGISTRY_TOKEN
      
      - name: Publish main lib-q crate to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish -p lib-q --token $CARGO_REGISTRY_TOKEN

  # Build and publish WASM packages
  publish-wasm-packages:
    name: Build and Publish WASM Packages
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: latest
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            pkg
            node_modules
          key: ${{ runner.os }}-wasm-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-wasm-
      
      # Build main lib-q WASM package
      - name: Build main lib-q WASM package
        run: |
          echo "Building main lib-q WASM package..."
          wasm-pack build --target web --features "wasm,all-algorithms" --verbose
          echo "Main lib-q WASM build completed successfully"
      
      - name: Prepare main NPM package
        run: |
          cd pkg
          npm pkg set name="@lib-q/core"
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          npm pkg set version=$VERSION
          npm pkg set description="Post-quantum cryptography library for Node.js (complete package)"
          npm pkg set keywords="cryptography,post-quantum,security,wasm"
          npm pkg set author="lib-Q Contributors"
          npm pkg set license="Apache-2.0"
          npm pkg set repository.type="git"
          npm pkg set repository.url="https://github.com/Enkom-Tech/libQ.git"
          npm pkg set homepage="https://github.com/Enkom-Tech/libQ#readme"
          npm pkg set bugs.url="https://github.com/Enkom-Tech/libQ/issues"
          npm pkg set files=["*.js","*.d.ts","*.wasm"]
          npm pkg set main="libq.js"
          npm pkg set types="libq.d.ts"
          npm pkg set exports.import="./libq.js"
          npm pkg set exports.require="./libq.js"
      
      - name: Publish main NPM package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd pkg
          npm publish --access public
      
      # Build individual crate WASM packages
      - name: Build lib-q-kem WASM package
        run: |
          echo "Building lib-q-kem WASM package..."
          wasm-pack build lib-q-kem --target web --features "kyber" --out-dir pkg-kem --verbose
          echo "lib-q-kem WASM build completed successfully"
      
      - name: Prepare lib-q-kem NPM package
        run: |
          cd pkg-kem
          npm pkg set name="@lib-q/kem"
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          npm pkg set version=$VERSION
          npm pkg set description="Post-quantum Key Encapsulation Mechanisms for Node.js"
          npm pkg set keywords="cryptography,post-quantum,kem,key-encapsulation,wasm"
          npm pkg set author="lib-Q Contributors"
          npm pkg set license="Apache-2.0"
          npm pkg set repository.type="git"
          npm pkg set repository.url="https://github.com/Enkom-Tech/libQ.git"
          npm pkg set homepage="https://github.com/Enkom-Tech/libQ#readme"
          npm pkg set bugs.url="https://github.com/Enkom-Tech/libQ/issues"
          npm pkg set files=["*.js","*.d.ts","*.wasm"]
          npm pkg set main="lib_q_kem.js"
          npm pkg set types="lib_q_kem.d.ts"
          npm pkg set exports.import="./lib_q_kem.js"
          npm pkg set exports.require="./lib_q_kem.js"
      
      - name: Publish lib-q-kem NPM package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd pkg-kem
          npm publish --access public
      
      - name: Build lib-q-sig WASM package
        run: |
          echo "Building lib-q-sig WASM package..."
          wasm-pack build lib-q-sig --target web --features "dilithium" --out-dir pkg-sig --verbose
          echo "lib-q-sig WASM build completed successfully"
      
      - name: Prepare lib-q-sig NPM package
        run: |
          cd pkg-sig
          npm pkg set name="@lib-q/sig"
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          npm pkg set version=$VERSION
          npm pkg set description="Post-quantum Digital Signatures for Node.js"
          npm pkg set keywords="cryptography,post-quantum,signatures,digital-signatures,wasm"
          npm pkg set author="lib-Q Contributors"
          npm pkg set license="Apache-2.0"
          npm pkg set repository.type="git"
          npm pkg set repository.url="https://github.com/Enkom-Tech/libQ.git"
          npm pkg set homepage="https://github.com/Enkom-Tech/libQ#readme"
          npm pkg set bugs.url="https://github.com/Enkom-Tech/libQ/issues"
          npm pkg set files=["*.js","*.d.ts","*.wasm"]
          npm pkg set main="lib_q_sig.js"
          npm pkg set types="lib_q_sig.d.ts"
          npm pkg set exports.import="./lib_q_sig.js"
          npm pkg set exports.require="./lib_q_sig.js"
      
      - name: Publish lib-q-sig NPM package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd pkg-sig
          npm publish --access public
      
      - name: Build lib-q-hash WASM package
        run: |
          echo "Building lib-q-hash WASM package..."
          wasm-pack build lib-q-hash --target web --features "alloc,oid" --out-dir pkg-hash --verbose
          echo "lib-q-hash WASM build completed successfully"
      
      - name: Prepare lib-q-hash NPM package
        run: |
          cd pkg-hash
          npm pkg set name="@lib-q/hash"
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          npm pkg set version=$VERSION
          npm pkg set description="Post-quantum Hash Functions for Node.js (SHA-3, SHAKE, cSHAKE, KMAC, TupleHash, ParallelHash)"
          npm pkg set keywords="cryptography,post-quantum,hash,shake,kmac,tuplehash,parallelhash,wasm"
          npm pkg set author="lib-Q Contributors"
          npm pkg set license="Apache-2.0"
          npm pkg set repository.type="git"
          npm pkg set repository.url="https://github.com/Enkom-Tech/libQ.git"
          npm pkg set homepage="https://github.com/Enkom-Tech/libQ#readme"
          npm pkg set bugs.url="https://github.com/Enkom-Tech/libQ/issues"
          npm pkg set files=["*.js","*.d.ts","*.wasm"]
          npm pkg set main="lib_q_hash.js"
          npm pkg set types="lib_q_hash.d.ts"
          npm pkg set exports.import="./lib_q_hash.js"
          npm pkg set exports.require="./lib_q_hash.js"
      
      - name: Publish lib-q-hash NPM package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd pkg-hash
          npm publish --access public
      
      - name: Build lib-q-utils WASM package
        run: |
          echo "Building lib-q-utils WASM package..."
          wasm-pack build lib-q-utils --target web --out-dir pkg-utils --verbose
          echo "lib-q-utils WASM build completed successfully"
      
      - name: Prepare lib-q-utils NPM package
        run: |
          cd pkg-utils
          npm pkg set name="@lib-q/utils"
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          npm pkg set version=$VERSION
          npm pkg set description="Utility functions for post-quantum cryptography"
          npm pkg set keywords="cryptography,post-quantum,utilities,helpers,wasm"
          npm pkg set author="lib-Q Contributors"
          npm pkg set license="Apache-2.0"
          npm pkg set repository.type="git"
          npm pkg set repository.url="https://github.com/Enkom-Tech/libQ.git"
          npm pkg set homepage="https://github.com/Enkom-Tech/libQ#readme"
          npm pkg set bugs.url="https://github.com/Enkom-Tech/libQ/issues"
          npm pkg set files=["*.js","*.d.ts","*.wasm"]
          npm pkg set main="lib_q_utils.js"
          npm pkg set types="lib_q_utils.d.ts"
          npm pkg set exports.import="./lib_q_utils.js"
          npm pkg set exports.require="./lib_q_utils.js"
      
      - name: Publish lib-q-utils NPM package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd pkg-utils
          npm publish --access public

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    needs: [publish-crates, publish-wasm-packages]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --reverse)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## What's Changed
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
                         ### Rust
             ```bash
             cargo add lib-q
             ```
             
             ### Node.js
             ```bash
             npm install @lib-q/core
             ```
            
            ## Security
            
            This release contains only NIST-approved post-quantum cryptographic algorithms.
            All operations are constant-time and side-channel resistant.
            
            ## Documentation
            
                         - [API Documentation](https://docs.rs/lib-q)
            - [Security Model](https://github.com/Enkom-Tech/libQ/blob/main/docs/security.md)
            - [Development Guide](https://github.com/Enkom-Tech/libQ/blob/main/CONTRIBUTING.md)
          draft: false
          prerelease: false

  # Security verification post-release
  security-verification:
    name: Post-Release Security Verification
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Verify published crate
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          cargo install --version $VERSION lib-q
      
      - name: Verify WASM package
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          npm install @lib-q/core@$VERSION
          node -e "const libq = require('@lib-q/core'); console.log('WASM package loaded successfully');"
      
      - name: Run security tests
        run: |
          echo "Running available security tests..."
          cargo test --features "all-algorithms" --test constant_time
          echo "Security tests completed successfully"
