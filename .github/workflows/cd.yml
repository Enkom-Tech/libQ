name: CD

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Pre-release validation
  pre-release-validation:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Extract version
        id: extract-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
      
      - name: Generate cache key
        id: cache-key
        run: echo "value=${{ github.sha }}-${{ github.run_id }}" >> $GITHUB_OUTPUT
      
      - name: Validate version consistency
        run: |
          VERSION=${{ steps.extract-version.outputs.version }}
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
          if [ "$VERSION" != "$CARGO_VERSION" ]; then
            echo "❌ Version mismatch: tag $VERSION != Cargo.toml $CARGO_VERSION"
            exit 1
          fi
          echo "✅ Version consistency validated: $VERSION"
      
      - name: Run comprehensive validation
        uses: ./.github/actions/rust-build
        with:
          run-security-audit: "true"
          run-format-check: "true"
          run-clippy: "true"
          run-tests: "true"
          features: "all-algorithms"
      
      - name: Run release tests
        run: cargo test --all-features --release

  # Parallel publishing jobs - run after validation
  publish-rust-crates:
    name: Publish Rust Crates
    needs: pre-release-validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - package: "lib-q-core"
          - package: "lib-q-keccak"
          - package: "lib-q-ascon"
          - package: "lib-q-sha3"
          - package: "lib-q-k12"
          - package: "lib-q-kem"
          - package: "lib-q-ml-kem"
          - package: "lib-q-sig"
          - package: "lib-q-hash"
          - package: "lib-q-aead"
          - package: "lib-q-utils"
          - package: "lib-q-zkp"
          - package: "lib-q-sponge"
          - package: "lib-q"

    steps:
      - uses: actions/checkout@v5
      
      - name: Publish crate
        uses: ./.github/actions/crate-publish
        with:
          package: ${{ matrix.package }}
          token: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish-wasm-packages:
    name: Publish WASM Packages
    needs: pre-release-validation
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        include:
          - working-directory: "."
            package-name: "@lib-q/core"
            package-description: "Post-quantum cryptography library for Node.js (complete package)"
            package-keywords: "cryptography,post-quantum,security,wasm"
            features: "wasm,all-algorithms,ml-kem"
          - working-directory: "lib-q-ml-kem"
            package-name: "@lib-q/ml-kem"
            package-description: "NIST ML-KEM (Module-Lattice-based Key Encapsulation Mechanism) for Node.js"
            package-keywords: "cryptography,post-quantum,ml-kem,key-encapsulation,nist,wasm"
            features: "wasm"
          - working-directory: "lib-q-kem"
            package-name: "@lib-q/kem"
            package-description: "Post-quantum Key Encapsulation Mechanisms for Node.js"
            package-keywords: "cryptography,post-quantum,kem,key-encapsulation,wasm"
            features: "wasm,ml-kem"
          - working-directory: "lib-q-sig"
            package-name: "@lib-q/sig"
            package-description: "Post-quantum Digital Signatures for Node.js"
            package-keywords: "cryptography,post-quantum,signatures,digital-signatures,wasm"
            features: "dilithium"
            out-dir: "pkg-sig"
          - working-directory: "lib-q-hash"
            package-name: "@lib-q/hash"
            package-description: "Post-quantum Hash Functions for Node.js (SHA-3, SHAKE, cSHAKE, KMAC, TupleHash, ParallelHash)"
            package-keywords: "cryptography,post-quantum,hash,shake,kmac,tuplehash,parallelhash,wasm"
            features: "alloc,oid"
            out-dir: "pkg-hash"
          - working-directory: "lib-q-utils"
            package-name: "@lib-q/utils"
            package-description: "Utility functions for post-quantum cryptography"
            package-keywords: "cryptography,post-quantum,utilities,helpers,wasm"
            features: ""
            out-dir: "pkg-utils"

    steps:
      - uses: actions/checkout@v5
      
      - name: Build WASM
        uses: ./.github/actions/wasm-build
        with:
          working-directory: ${{ matrix.working-directory }}
          features: ${{ matrix.features }}
          targets: "web"
      
      - name: Publish NPM package
        uses: ./.github/actions/npm-publish
        with:
          package-name: ${{ matrix.package-name }}
          package-description: ${{ matrix.package-description }}
          package-keywords: ${{ matrix.package-keywords }}
          working-directory: ${{ matrix.out-dir || 'pkg' }}
          token: ${{ secrets.NPM_TOKEN }}
          version: ${{ needs.pre-release-validation.outputs.version }}

  # Post-release tasks - run after publishing
  post-release:
    name: Post-Release Tasks
    needs: [publish-rust-crates, publish-wasm-packages]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          VERSION=${{ needs.pre-release-validation.outputs.version }}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --reverse)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## What's Changed
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ### Rust
            ```bash
            cargo add lib-q
            ```
            
            ### Node.js
            ```bash
            npm install @lib-q/core
            ```
            
            ## Security
            
            This release contains only NIST-approved post-quantum cryptographic algorithms.
            All operations are constant-time and side-channel resistant.
            
            ## Documentation
            
            - [API Documentation](https://docs.rs/lib-q)
            - [Security Model](https://github.com/Enkom-Tech/libQ/blob/main/docs/security.md)
            - [Development Guide](https://github.com/Enkom-Tech/libQ/blob/main/CONTRIBUTING.md)
          draft: false
          prerelease: false

  # Security verification - runs after release
  security-verification:
    name: Post-Release Security Verification
    needs: [pre-release-validation, post-release]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Verify published Rust crate
        run: |
          VERSION=${{ needs.pre-release-validation.outputs.version }}
          echo "Verifying Rust crate version $VERSION..."
          cargo install --version $VERSION lib-q
          echo "✅ Rust crate verification successful"
      
      - name: Verify published WASM package
        run: |
          VERSION=${{ needs.pre-release-validation.outputs.version }}
          echo "Verifying WASM package version $VERSION..."
          npm install @lib-q/core@$VERSION
          node -e "const libq = require('@lib-q/core'); console.log('✅ WASM package loaded successfully');"
      
      - name: Run security tests
        run: |
          echo "Running security validation tests..."
          cargo test --features "all-algorithms" --test constant_time
          echo "✅ Security tests completed successfully"

  # Final CD summary
  cd-summary:
    name: CD Summary
    needs: [pre-release-validation, publish-rust-crates, publish-wasm-packages, post-release, security-verification]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate CD summary
        run: |
          echo "## 🚀 CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.pre-release-validation.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pipeline Status:" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-release validation: ${{ needs.pre-release-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Rust crate publishing: ${{ needs.publish-rust-crates.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- WASM package publishing: ${{ needs.publish-wasm-packages.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Release creation: ${{ needs.post-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security verification: ${{ needs.security-verification.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for critical failures
          if [[ "${{ needs.pre-release-validation.result }}" == "failure" ]] || \
             [[ "${{ needs.security-verification.result }}" == "failure" ]]; then
            echo "❌ **Critical pipeline failures detected!**" >> $GITHUB_STEP_SUMMARY
            echo "Please review the failed jobs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ **Release ${{ needs.pre-release-validation.outputs.version }} deployed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Published Packages:" >> $GITHUB_STEP_SUMMARY
          echo "- Rust: [lib-q@${{ needs.pre-release-validation.outputs.version }}](https://crates.io/crates/lib-q)" >> $GITHUB_STEP_SUMMARY
          echo "- NPM: [@lib-q/core@${{ needs.pre-release-validation.outputs.version }}](https://www.npmjs.com/package/@lib-q/core)" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub: [Release ${{ github.ref }}](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref }})" >> $GITHUB_STEP_SUMMARY
