name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  CARGO_TERM_COLOR: always

jobs:
  # Core PR validation - runs first and fastest
  core-validation:
    name: Core Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - uses: actions/checkout@v5
      
      - name: Generate cache key
        id: cache-key
        run: echo "value=${{ github.sha }}-${{ github.run_id }}" >> $GITHUB_OUTPUT
      
      - name: Core validation
        uses: ./.github/actions/rust-build
        with:
          run-security-audit: "true"
          run-format-check: "true"
          run-clippy: "true"
          run-tests: "false"
          features: "all-algorithms"
      
      - name: Check documentation
        run: cargo doc --all-features --no-deps --document-private-items

  # Security validation - parallel with core validation
  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v5
      
      - name: Run security validation
        uses: ./.github/actions/rust-build
        with:
          run-security-audit: "true"
          run-format-check: "false"
          run-clippy: "false"
          run-tests: "false"
      
      - name: Validate classical crypto compliance
        run: |
          echo "üîê Running classical crypto validation..."
          cargo run --bin security-validator --features "std" -- validate-classical
      
      - name: Validate SHA-3 compliance
        run: |
          echo "üìä Running SHA-3 compliance validation..."
          cargo run --bin security-validator --features "std" -- validate-sha3

  # Test coverage analysis - runs after core validation
  test-coverage:
    name: Test Coverage
    needs: core-validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      
      - name: Run coverage tests
        uses: ./.github/actions/rust-test
        with:
          features: "all-algorithms"
          run-coverage: "true"
          coverage-threshold: "95"
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  # Performance regression check - runs after core validation
  performance-check:
    name: Performance Check
    needs: core-validation
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-perf-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-perf-
      
      - name: Run benchmarks
        run: cargo bench --features "all-algorithms" --verbose
      
      - name: Check for performance regressions
        run: |
          echo "Performance check completed"
          # This would compare against baseline benchmarks

  # WASM compatibility check
  wasm-check:
    name: WASM Compatibility
    needs: core-validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v5
      
      - name: Build WASM
        uses: ./.github/actions/wasm-build
        with:
          features: "wasm,all-algorithms"
          targets: "web,nodejs"

  # Documentation validation
  docs-validation:
    name: Documentation Validation
    needs: core-validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      
      - name: Check documentation completeness
        run: |
          # Check that all public APIs are documented
          cargo doc --all-features --no-deps --document-private-items
          
          # Check for missing documentation
          MISSING_DOCS=$(cargo doc --all-features --no-deps 2>&1 | grep -c "missing documentation" || true)
          if [ $MISSING_DOCS -gt 0 ]; then
            echo "‚ö†Ô∏è  WARNING: $MISSING_DOCS items missing documentation"
          else
            echo "‚úÖ All public APIs are documented"
          fi
      
      - name: Check README examples
        run: |
          # Verify that README examples compile
          cargo check --examples --features "all-algorithms"
          echo "‚úÖ README examples compile successfully"

  # PR summary and reporting - runs after all other jobs
  pr-summary:
    name: PR Summary
    needs: [core-validation, security-validation, test-coverage, performance-check, wasm-check, docs-validation]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate PR summary
        run: |
          echo "# üîç Pull Request Summary" > pr-summary.md
          echo "Generated: $(date)" >> pr-summary.md
          echo "" >> pr-summary.md
          echo "## üìã Validation Results" >> pr-summary.md
          echo "- Core Validation: ${{ needs.core-validation.result }}" >> pr-summary.md
          echo "- Security Validation: ${{ needs.security-validation.result }}" >> pr-summary.md
          echo "- Test Coverage: ${{ needs.test-coverage.result }}" >> pr-summary.md
          echo "- Performance Check: ${{ needs.performance-check.result }}" >> pr-summary.md
          echo "- WASM Compatibility: ${{ needs.wasm-check.result }}" >> pr-summary.md
          echo "- Documentation: ${{ needs.docs-validation.result }}" >> pr-summary.md
          echo "" >> pr-summary.md
          
          # Determine overall status
          if [[ "${{ needs.core-validation.result }}" == "success" ]] && \
             [[ "${{ needs.security-validation.result }}" == "success" ]] && \
             [[ "${{ needs.test-coverage.result }}" == "success" ]]; then
            echo "## ‚úÖ Overall Status: PASSED" >> pr-summary.md
          else
            echo "## ‚ùå Overall Status: FAILED" >> pr-summary.md
          fi
          
          echo "" >> pr-summary.md
          echo "## üîí Security Checklist" >> pr-summary.md
          echo "- [ ] No classical cryptographic algorithms" >> pr-summary.md
          echo "- [ ] Only SHA-3 family hash functions" >> pr-summary.md
          echo "- [ ] Constant-time operations" >> pr-summary.md
          echo "- [ ] Proper memory zeroization" >> pr-summary.md
          echo "- [ ] Input validation" >> pr-summary.md
          echo "- [ ] Error handling" >> pr-summary.md
          echo "" >> pr-summary.md
          echo "## üìù Review Notes" >> pr-summary.md
          echo "Please review the security implications of this change carefully." >> pr-summary.md
          echo "All cryptographic changes require security team review." >> pr-summary.md
      
      - name: Upload PR summary
        uses: actions/upload-artifact@v4
        with:
          name: pr-summary
          path: pr-summary.md

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('pr-summary.md', 'utf8');
            
            // Determine if we should approve or request changes
            const criticalJobs = [
              context.payload.repository.owner.login + '/' + context.payload.repository.name + '/actions/runs/' + process.env.GITHUB_RUN_ID + '/jobs',
              'core-validation',
              'security-validation',
              'test-coverage'
            ];
            
            let shouldApprove = true;
            for (const job of criticalJobs) {
              if (job.result !== 'success') {
                shouldApprove = false;
                break;
              }
            }
            
            let commentBody = summary;
            if (shouldApprove) {
              commentBody += '\n\n---\n\n‚úÖ **Automated validation passed!** This PR is ready for review.';
            } else {
              commentBody += '\n\n---\n\n‚ùå **Automated validation failed!** Please address the issues above before merging.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
