name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Clippy linting
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Check for unused dependencies
        run: cargo check --all-targets --all-features
      
      - name: Check documentation
        run: cargo doc --all-features --no-deps --document-private-items

  # Security validation for PRs
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Security audit
        run: cargo audit --deny warnings
      
      - name: Check for classical crypto
        run: |
          echo "Checking for classical cryptographic algorithms..."
          if grep -r "use.*aes\|use.*sha256\|use.*rsa\|use.*ecdsa" src/; then
            echo "ERROR: Classical cryptographic algorithms detected in PR!"
            exit 1
          fi
          echo "No classical crypto detected ✅"
      
      - name: Check for SHA-3 compliance
        run: |
          echo "Checking for SHA-3 family compliance..."
          if grep -r "use.*sha[0-9]" src/ | grep -v "shake\|cshake"; then
            echo "ERROR: Non-SHA-3 hash functions detected in PR!"
            exit 1
          fi
          echo "SHA-3 compliance verified ✅"

  # Test coverage
  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Generate coverage report
        run: cargo tarpaulin --features "all-algorithms" --out Html --output-dir coverage
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
      
      - name: Check coverage threshold
        run: |
          # Check that coverage is above 95% for cryptographic functions
          COVERAGE=$(cargo tarpaulin --features "all-algorithms" --out Xml | grep -o 'coverage="[^"]*"' | cut -d'"' -f2)
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 95" | bc -l) )); then
            echo "ERROR: Coverage below 95% threshold"
            exit 1
          fi

  # Performance regression check
  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run benchmarks
        run: cargo bench --features "all-algorithms" --verbose
      
      - name: Check for performance regressions
        run: |
          # Compare with baseline performance
          echo "Performance check completed"
          # This would compare against baseline benchmarks

  # WASM compatibility check
  wasm-check:
    name: WASM Compatibility
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: latest
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            pkg
          key: ${{ runner.os }}-wasm-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-wasm-
      
      - name: Build WASM
        run: wasm-pack build --target nodejs --features "wasm,all-algorithms"
      
      - name: Test WASM
        run: wasm-pack test --headless --firefox --features "wasm,all-algorithms"

  # Documentation check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Check documentation
        run: |
          # Check that all public APIs are documented
          cargo doc --all-features --no-deps --document-private-items
          
          # Check for missing documentation
          MISSING_DOCS=$(cargo doc --all-features --no-deps 2>&1 | grep -c "missing documentation" || true)
          if [ $MISSING_DOCS -gt 0 ]; then
            echo "WARNING: $MISSING_DOCS items missing documentation"
          fi
      
      - name: Check README examples
        run: |
          # Verify that README examples compile
          cargo check --examples --features "all-algorithms"

  # PR summary
  pr-summary:
    name: PR Summary
    needs: [code-quality, security-check, test-coverage, performance, wasm-check, docs-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate PR summary
        run: |
          echo "# Pull Request Summary" > pr-summary.md
          echo "Generated: $(date)" >> pr-summary.md
          echo "" >> pr-summary.md
          echo "## Checks" >> pr-summary.md
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> pr-summary.md
          echo "- Security Check: ${{ needs.security-check.result }}" >> pr-summary.md
          echo "- Test Coverage: ${{ needs.test-coverage.result }}" >> pr-summary.md
          echo "- Performance: ${{ needs.performance.result }}" >> pr-summary.md
          echo "- WASM Compatibility: ${{ needs.wasm-check.result }}" >> pr-summary.md
          echo "- Documentation: ${{ needs.docs-check.result }}" >> pr-summary.md
          echo "" >> pr-summary.md
          echo "## Security Checklist" >> pr-summary.md
          echo "- [ ] No classical cryptographic algorithms" >> pr-summary.md
          echo "- [ ] Only SHA-3 family hash functions" >> pr-summary.md
          echo "- [ ] Constant-time operations" >> pr-summary.md
          echo "- [ ] Proper memory zeroization" >> pr-summary.md
          echo "- [ ] Input validation" >> pr-summary.md
          echo "- [ ] Error handling" >> pr-summary.md
          echo "" >> pr-summary.md
          echo "## Review Notes" >> pr-summary.md
          echo "Please review the security implications of this change carefully." >> pr-summary.md
      
      - name: Upload PR summary
        uses: actions/upload-artifact@v3
        with:
          name: pr-summary
          path: pr-summary.md
      
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('pr-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
